#https://serverless.com/framework/docs/providers/aws/guide/serverless.yml

service: arweave-gateway

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-2'}
  endpointType: regional
  memorySize: 1536
  timeout: 30
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - rds-db:connect
      Resource:
        - arn:aws:rds-db:${self:provider.region, 'eu-west-2'}:384386061638:dbuser:*/*
    - Effect: "Allow"
      Action:
        - s3:GetObject
        - s3:GetObjectTagging
        - s3:PutObject
        - s3:PutObjectTagging
        - s3:ListBucket
      Resource:
        - arn:aws:s3:::${self:service}-${opt:stage, 'dev'}-*/*
    - Effect: Allow
      Action:
        - sqs:GetQueueUrl
        - sqs:SendMessage
        - sqs:DeleteMessage
        - sqs:DeleteMessageBatch
      Resource:
        - arn:aws:sqs:${self:provider.region, 'eu-west-2'}:384386061638:${self:service}-${opt:stage, 'dev'}-*
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - arn:aws:sns:${self:provider.region, 'eu-west-2'}:384386061638:${self:service}-${opt:stage, 'dev'}-*

  tracing:
    lambda: true

  logs:
    restApi: true
  stackTags:
    Service: ${self:service}
    Environment: ${opt:stage, 'dev'}
  deploymentBucket:
    name: ${self:service}-deployments-${self:provider.region, 'eu-west-2'}
    maxPreviousDeploymentArtifacts: 10
    blockPublicAccess: true
    useAccelerateEndpoint: true
  environment:
    ARWEAVE_NODES: '["http://lon-1.eu-west-1.arweave.net:1984","http://lon-2.eu-west-1.arweave.net:1984","http://lon-3.eu-west-1.arweave.net:1984","http://lon-4.eu-west-1.arweave.net:1984","http://lon-5.eu-west-1.arweave.net:1984","http://lon-6.eu-west-1.arweave.net:1984"]'
    ARWEAVE_SNS_EVENTS_ARN: ${self:custom.events.topicArn}
    ARWEAVE_SQS_DISPATCH_TXS_URL: https://sqs.${self:provider.region, 'eu-west-2'}.amazonaws.com/384386061638/${self:custom.queues.dispatchTxs}
    ARWEAVE_SQS_IMPORT_TXS_URL: https://sqs.${self:provider.region, 'eu-west-2'}.amazonaws.com/384386061638/${self:custom.queues.importTxs}
    ARWEAVE_SQS_IMPORT_BUNDLES_URL: https://sqs.${self:provider.region, 'eu-west-2'}.amazonaws.com/384386061638/${self:custom.queues.importBundles}
    ARWEAVE_SQS_IMPORT_BLOCKS_URL: https://sqs.${self:provider.region, 'eu-west-2'}.amazonaws.com/384386061638/${self:custom.queues.importBlocks}.fifo
    ARWEAVE_SQS_IMPORT_CHUNKS_URL: https://sqs.${self:provider.region, 'eu-west-2'}.amazonaws.com/384386061638/${self:custom.queues.importChunks}
    ARWEAVE_SQS_EXPORT_CHUNKS_URL: https://sqs.${self:provider.region, 'eu-west-2'}.amazonaws.com/384386061638/${self:custom.queues.exportChunks}
    ARWEAVE_S3_TX_DATA_BUCKET: ${self:custom.buckets.txData}
    ARWEAVE_DB_READ_HOST: ${file(serverless.${opt:stage, 'dev'}.yml):ARWEAVE_DB_READ_HOST}
    ARWEAVE_DB_WRITE_HOST: ${file(serverless.${opt:stage, 'dev'}.yml):ARWEAVE_DB_WRITE_HOST}
    ARWEAVE_DB_SCHEMA: ${file(serverless.${opt:stage, 'dev'}.yml):ARWEAVE_DB_SCHEMA}
    ARWEAVE_GATEWAY_DOMAIN: ${file(serverless.${opt:stage, 'dev'}.yml):domain}

plugins:
  - serverless-stage-manager
  - serverless-deployment-bucket
  # - serverless-offline-sqs
  - serverless-offline
  - serverless-export-env

functions:
  dispatch-txs:
    handler: dist/jobs/dispatch-txs.handler
    timeout: 25
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt: [SQSDispatchTxsQueue, Arn]

  import-txs:
    handler: dist/jobs/import-txs.handler
    timeout: 60
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt: [SQSImportTxsQueue, Arn]

  import-bundles:
    handler: dist/jobs/import-bundles.handler
    timeout: 180
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt: [SQSImportBundlesQueue, Arn]

  import-blocks:
    handler: dist/jobs/import-blocks.handler
    timeout: 120
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt: [SQSImportBlocksQueue, Arn]

  import-chunks:
    handler: dist/jobs/import-chunks.handler
    timeout: 120
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt: [SQSImportChunksQueue, Arn]

  export-chunks:
    handler: dist/jobs/export-chunks.handler
    timeout: 30
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt: [SQSExportChunksQueue, Arn]

  # purge-orphans:
  #   handler: dist/jobs/purge-orphans.handler
  #   events:
  #     - schedule:
  #         rate: cron(* * * * ? *)
  #         enabled: true

package:
  exclude:
    - .*/*
    - node_modules/aws-sdk/**
    - node_modules/@sentry/browser/**
    - node_modules/moment/min/**
    - node_modules/moment/dist/**
    - node_modules/moment/src/**
    - migrations/**
    - scripts/**
    - terraform/**
    - test/**
    - tls/**
    - /*
  include:
    - dist/**

custom:
  events:
    topic: ${self:service}-${opt:stage, 'dev'}-events
    topicArn: arn:aws:sns:${self:provider.region, 'eu-west-2'}:384386061638:${self:service}-${opt:stage, 'dev'}-events
  queues:
    dispatchTxs: ${self:service}-${opt:stage, 'dev'}-dispatch-txs
    importTxs: ${self:service}-${opt:stage, 'dev'}-import-txs
    importBundles: ${self:service}-${opt:stage, 'dev'}-import-bundles
    importBlocks: ${self:service}-${opt:stage, 'dev'}-import-blocks
    importChunks: ${self:service}-${opt:stage, 'dev'}-import-chunks
    exportChunks: ${self:service}-${opt:stage, 'dev'}-export-chunks
  buckets:
    txData: ${self:service}-${opt:stage, 'dev'}-tx-data-${self:provider.region, 'eu-west-2'}
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: "2012-11-05"
    endpoint: http://0.0.0.0:9324
    region: eu-west-2
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false

  stages:
    - dev
    - prod
  apiGatewayCaching:
    enabled: true
    clusterSize: "0.5"
    ttlInSeconds: 30
    dataEncrypted: false
    perKeyInvalidation:
      requireAuthorization: true
      handleUnauthorizedRequests: Ignore
  serverless-offline:
    httpPort: 3000
    resourceRoutes: true

resources:
  Resources:
    SNSEventsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "Events topic (${opt:stage, 'dev'}-tx-data-${self:provider.region, 'eu-west-2'}) - Managed by Serverless + CloudFormation"
        TopicName: ${self:custom.events.topic}

    S3TxDataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.txData}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          RestrictPublicBuckets: true
          IgnorePublicAcls: true

    SQSDispatchTxsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queues.dispatchTxs}
        MessageRetentionPeriod: 1209600 #14 days in seconds, max supported value
        ReceiveMessageWaitTimeSeconds: 10
        VisibilityTimeout: 60
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [SQSDispatchTxsDLQ, Arn]
          maxReceiveCount: 2

    SQSDispatchTxsDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queues.dispatchTxs}-DLQ
        MessageRetentionPeriod: 1209600 #14 days, max

    SQSImportTxsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queues.importTxs}
        MessageRetentionPeriod: 1209600 #14 days in seconds, max supported value
        ReceiveMessageWaitTimeSeconds: 10
        VisibilityTimeout: 120
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [SQSImportTxsDLQ, Arn]
          maxReceiveCount: 2

    SQSImportTxsDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queues.importTxs}-DLQ
        MessageRetentionPeriod: 1209600 #14 days, max

    SQSImportBundlesQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queues.importBundles}
        MessageRetentionPeriod: 1209600 #14 days in seconds, max supported value
        ReceiveMessageWaitTimeSeconds: 10
        VisibilityTimeout: 180
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [SQSImportBundlesDLQ, Arn]
          maxReceiveCount: 5 #The handler for these messages handles retry logic, so this will only applies to uncaught errors

    SQSImportBundlesDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queues.importBundles}-DLQ
        MessageRetentionPeriod: 1209600 #14 days, max

    SQSImportChunksQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queues.importChunks}
        MessageRetentionPeriod: 1209600 #14 days in seconds, max supported value
        ReceiveMessageWaitTimeSeconds: 10
        VisibilityTimeout: 120
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [SQSImportChunksDLQ, Arn]
          maxReceiveCount: 2

    SQSImportChunksDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queues.importChunks}-DLQ
        MessageRetentionPeriod: 1209600 #14 days, max

    SQSExportChunksQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queues.exportChunks}
        MessageRetentionPeriod: 1209600 #14 days in seconds, max supported value
        ReceiveMessageWaitTimeSeconds: 10
        VisibilityTimeout: 90
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [SQSExportChunksDLQ, Arn]
          maxReceiveCount: 20

    SQSExportChunksDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queues.exportChunks}-DLQ
        MessageRetentionPeriod: 1209600 #14 days, max

    SQSImportBlocksQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queues.importBlocks}.fifo
        FifoQueue: true
        MessageRetentionPeriod: 1209600 #14 days in seconds, max supported value
        ReceiveMessageWaitTimeSeconds: 10
        VisibilityTimeout: 120
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [SQSImportBlocksDLQ, Arn]
          maxReceiveCount: 2

    SQSImportBlocksDLQ:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: ${self:custom.queues.importBlocks}-DLQ.fifo
        MessageRetentionPeriod: 1209600 #14 days, max

